package com.planet_ink.grinder;
import java.awt.*;
import java.util.*;
import javax.swing.JTextPane;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JComboBox;
import javax.swing.JTextField;
import javax.swing.JCheckBox;
import javax.swing.JEditorPane;
import javax.swing.JRadioButton;

public class GrinderExit extends Dialog {

    private Frame myParent=null;
    private MapGrinder.Exit exit=null;
    private MapGrinder.Exit origExit=null;
    private boolean disFlag=false;
    private static boolean upAlready=false;
    
	public GrinderExit(Frame parent, 
                        String title, 
                        String text, 
                        boolean modal)
	{
		super(parent, modal);
        myParent=parent;
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
        
		//{{INIT_CONTROLS
		setLayout(null);
		setBackground(new java.awt.Color(255,255,128));
		setForeground(java.awt.Color.blue);
		setFont(new Font("Dialog", Font.BOLD, 12));
		setSize(348,417);
		setVisible(false);
		okButton.setLabel("OK");
		add(okButton);
		okButton.setBounds(12,384,66,24);
		CancelButton.setLabel("Cancel");
		add(CancelButton);
		CancelButton.setBounds(276,384,66,24);
		JLabel1.setRequestFocusEnabled(false);
		JLabel1.setSelectedTextColor(java.awt.Color.blue);
		JLabel1.setCaretColor(java.awt.Color.blue);
		JLabel1.setOpaque(false);
		JLabel1.setDisabledTextColor(java.awt.Color.blue);
		JLabel1.setEditable(false);
		JLabel1.setEnabled(false);
		add(JLabel1);
		JLabel1.setBackground(java.awt.Color.yellow);
		JLabel1.setBounds(12,12,324,48);
		shared.setText("Shared with room ...");
		shared.setActionCommand("Shared with room ...");
		shared.setOpaque(false);
		shared.setEnabled(false);
		add(shared);
		shared.setBounds(12,60,324,24);
		JLabel2.setRequestFocusEnabled(false);
		JLabel2.setText("Exit class:");
		add(JLabel2);
		JLabel2.setForeground(java.awt.Color.black);
		JLabel2.setBounds(12,84,72,24);
		hasDoor.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
		hasDoor.setText("Has a door");
		hasDoor.setActionCommand("Has a door");
		hasDoor.setOpaque(false);
		hasDoor.setEnabled(false);
		add(hasDoor);
		hasDoor.setBounds(12,180,168,24);
		doorClosed.setText("Defaults closed");
		doorClosed.setActionCommand("Defaults closed");
		doorClosed.setOpaque(false);
		doorClosed.setEnabled(false);
		add(doorClosed);
		doorClosed.setBounds(12,204,168,24);
		hasLock.setText("Has a lock");
		hasLock.setActionCommand("Has a lock");
		hasLock.setOpaque(false);
		hasLock.setEnabled(false);
		add(hasLock);
		hasLock.setBounds(12,228,168,24);
		lockLocked.setText("Defaults locked");
		lockLocked.setActionCommand("Defaults locked");
		lockLocked.setOpaque(false);
		lockLocked.setEnabled(false);
		add(lockLocked);
		lockLocked.setBounds(12,276,168,24);
		level.setEnabled(false);
		add(level);
		level.setBounds(264,180,72,24);
		label2.setRequestFocusEnabled(false);
		label2.setText("Level:");
		label2.setEnabled(false);
		add(label2);
		label2.setForeground(java.awt.Color.black);
		label2.setBounds(216,180,48,24);
		name.setEnabled(false);
		add(name);
		name.setBounds(108,108,96,24);
		JLabel3.setRequestFocusEnabled(false);
		JLabel3.setText("Exit name:");
		JLabel3.setEnabled(false);
		add(JLabel3);
		JLabel3.setForeground(java.awt.Color.black);
		JLabel3.setBounds(12,108,72,24);
		desc.setEnabled(false);
		add(desc);
		desc.setBounds(108,132,228,24);
		JLabel4.setRequestFocusEnabled(false);
		JLabel4.setText("Exit description:");
		JLabel4.setEnabled(false);
		add(JLabel4);
		JLabel4.setForeground(java.awt.Color.black);
		JLabel4.setBounds(12,132,96,24);
		displayText.setEnabled(false);
		add(displayText);
		displayText.setBounds(108,156,96,24);
		JLabel5.setRequestFocusEnabled(false);
		JLabel5.setText("Open display:");
		JLabel5.setEnabled(false);
		add(JLabel5);
		JLabel5.setForeground(java.awt.Color.black);
		JLabel5.setBounds(12,156,96,24);
		JLabel6.setRequestFocusEnabled(false);
		JLabel6.setText("Reset ticks:");
		JLabel6.setEnabled(false);
		add(JLabel6);
		JLabel6.setForeground(java.awt.Color.black);
		JLabel6.setBounds(12,324,72,24);
		resetTicks.setEnabled(false);
		add(resetTicks);
		resetTicks.setBounds(108,324,48,24);
		JLabel7.setRequestFocusEnabled(false);
		JLabel7.setText("Closed display:");
		JLabel7.setEnabled(false);
		add(JLabel7);
		JLabel7.setForeground(java.awt.Color.black);
		JLabel7.setBounds(12,300,96,24);
		closedText.setEnabled(false);
		add(closedText);
		closedText.setBounds(108,300,96,24);
		doorWord.setEnabled(false);
		add(doorWord);
		doorWord.setBounds(288,300,48,24);
		JLabel8.setRequestFocusEnabled(false);
		JLabel8.setText("Door word:");
		JLabel8.setEnabled(false);
		add(JLabel8);
		JLabel8.setForeground(java.awt.Color.black);
		JLabel8.setBounds(216,300,72,24);
		openWord.setEnabled(false);
		add(openWord);
		openWord.setBounds(288,324,48,24);
		JLabel9.setRequestFocusEnabled(false);
		JLabel9.setText("Open word:");
		JLabel9.setEnabled(false);
		add(JLabel9);
		JLabel9.setForeground(java.awt.Color.black);
		JLabel9.setBounds(216,324,72,24);
		closeWord.setEnabled(false);
		add(closeWord);
		closeWord.setBounds(288,348,48,24);
		JLabel10.setRequestFocusEnabled(false);
		JLabel10.setText("Close word:");
		JLabel10.setEnabled(false);
		add(JLabel10);
		JLabel10.setForeground(java.awt.Color.black);
		JLabel10.setBounds(216,348,72,24);
		readable.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
		readable.setText("Readable:");
		readable.setActionCommand("Readable:");
		readable.setOpaque(false);
		readable.setEnabled(false);
		add(readable);
		readable.setBounds(12,348,84,24);
		readableText.setEnabled(false);
		add(readableText);
		readableText.setBounds(108,348,96,24);
		add(exitclass);
		exitclass.setBounds(108,84,228,25);
		classPicked.setEnabled(false);
		add(classPicked);
		classPicked.setBounds(216,252,120,25);
		keyCode.setEnabled(false);
		add(keyCode);
		keyCode.setBounds(108,252,96,24);
		JLabel11.setRequestFocusEnabled(false);
		JLabel11.setText("Key code:");
		JLabel11.setEnabled(false);
		add(JLabel11);
		JLabel11.setForeground(java.awt.Color.black);
		JLabel11.setBounds(12,252,60,24);
		trapped.setText("Trapped");
		trapped.setActionCommand("Defaults closed");
		trapped.setOpaque(false);
		trapped.setEnabled(false);
		add(trapped);
		trapped.setBounds(216,156,120,24);
		levelRestrict.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
		levelRestrict.setText("Level Restricted");
		levelRestrict.setActionCommand("Has a door");
		levelRestrict.setOpaque(false);
		levelRestrict.setEnabled(false);
		add(levelRestrict);
		levelRestrict.setBounds(216,204,120,24);
		classRestrict.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
		classRestrict.setText("Class Restricted");
		classRestrict.setActionCommand("Has a door");
		classRestrict.setOpaque(false);
		classRestrict.setEnabled(false);
		add(classRestrict);
		classRestrict.setBounds(216,228,120,24);
		hidden.setVerticalTextPosition(javax.swing.SwingConstants.TOP);
		hidden.setText("Hidden");
		hidden.setActionCommand("Has a door");
		hidden.setOpaque(false);
		hidden.setEnabled(false);
		add(hidden);
		hidden.setBounds(216,276,120,24);
		setTitle("Yo baby yo baby yo!");
		setResizable(false);
		//}}
		
		JLabel1.setText(text);
		JLabel1.setForeground(java.awt.Color.blue);
		JLabel1.setFont(new Font("Dialog", Font.BOLD, 12));
		setTitle(title);
        
		//{{REGISTER_LISTENERS
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		SymAction lSymAction = new SymAction();
		okButton.addActionListener(lSymAction);
		CancelButton.addActionListener(lSymAction);
		SymKey lSymKey=new SymKey();
		okButton.addKeyListener(lSymKey);
		CancelButton.addKeyListener(lSymKey);
		SymMouse aSymMouse = new SymMouse();
		exitclass.addMouseListener(aSymMouse);
		SymItem lSymItem = new SymItem();
		exitclass.addItemListener(lSymItem);
		hasDoor.addItemListener(lSymItem);
		hasDoor.addMouseListener(aSymMouse);
		doorClosed.addItemListener(lSymItem);
		lockLocked.addItemListener(lSymItem);
		SymPropertyChange lSymPropertyChange = new SymPropertyChange();
		keyCode.addPropertyChangeListener(lSymPropertyChange);
		hasLock.addItemListener(lSymItem);
		level.addActionListener(lSymAction);
		name.addActionListener(lSymAction);
		desc.addActionListener(lSymAction);
		displayText.addActionListener(lSymAction);
		SymFocus aSymFocus = new SymFocus();
		level.addFocusListener(aSymFocus);
		name.addFocusListener(aSymFocus);
		displayText.addFocusListener(aSymFocus);
		desc.addFocusListener(aSymFocus);
		keyCode.addFocusListener(aSymFocus);
		resetTicks.addFocusListener(aSymFocus);
		closedText.addFocusListener(aSymFocus);
		doorWord.addFocusListener(aSymFocus);
		openWord.addFocusListener(aSymFocus);
		closeWord.addFocusListener(aSymFocus);
		readableText.addFocusListener(aSymFocus);
		readable.addItemListener(lSymItem);
		levelRestrict.addItemListener(lSymItem);
		classRestrict.addItemListener(lSymItem);
		classPicked.addItemListener(lSymItem);
		trapped.addItemListener(lSymItem);
		hidden.addItemListener(lSymItem);
		//}}

	}
    
	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
                Dimension d = getSize();

		super.addNotify();

		// Only do this once.
		if (fComponentsAdjusted)
			return;

		// Adjust components according to the insets
		Insets insets = getInsets();
		setSize(insets.left + insets.right + d.width, insets.top + insets.bottom + d.height);
		Component components[] = getComponents();
		for (int i = 0; i < components.length; i++)
		{
			Point p = components[i].getLocation();
			p.translate(insets.left, insets.top);
			components[i].setLocation(p);
		}

		// Used for addNotify check.
		fComponentsAdjusted = true;
	}

    public void makeTheScreenRight()
    {
        
        for(int i=0;i<this.getComponentCount();i++)
        {
            Component C=this.getComponent(i);
            if((C != exitclass)
                &&(C != JLabel2)
                &&(C != okButton)
                &&(C != CancelButton))
                C.setEnabled(false);
        }
        if(exit.classID.equalsIgnoreCase("genexit"))
        {
            MapGrinder.GenGen g=new MapGrinder.GenGen();
            GenGrinder.setPropertiesStr(exit, g, exit.miscText());
            hasDoor.setEnabled(true);
            hasDoor.setSelected(g.hasADoor);
            hidden.setEnabled(true);
            hidden.setSelected((g.disposition&GenGrinder.IS_HIDDEN)==GenGrinder.IS_HIDDEN);
            JLabel3.setEnabled(true);name.setEnabled(true);
            name.setText(g.name);
            JLabel4.setEnabled(true);desc.setEnabled(true);
            desc.setText(g.description);
            JLabel5.setEnabled(true);displayText.setEnabled(true);
            displayText.setText(g.displayText);
            label2.setEnabled(true);level.setEnabled(true);
            level.setText(""+g.level);
            trapped.setEnabled(true);
            levelRestrict.setEnabled(true);
            levelRestrict.setSelected(g.levelRestricted);
            if(g.hasADoor)
            {
                JLabel6.setEnabled(true);resetTicks.setEnabled(true);
                resetTicks.setText(""+g.openDelayTicks);
                JLabel7.setEnabled(true);closedText.setEnabled(true);
                closedText.setText(g.closedText);
                JLabel8.setEnabled(true);doorWord.setEnabled(true);
                doorWord.setText(g.doorName);
                JLabel9.setEnabled(true);openWord.setEnabled(true);
                openWord.setText(g.openName);
                JLabel10.setEnabled(true);closeWord.setEnabled(true);
                closeWord.setText(g.closeName);
                doorClosed.setEnabled(true);
                doorClosed.setSelected(g.doorDefaultsClosed);
                hasLock.setEnabled(true);
                hasLock.setSelected(g.hasALock);
                g.classRestricted=false;
                classRestrict.setSelected(g.classRestricted);
                if(g.hasALock)
                {
                    JLabel11.setEnabled(true);
                    keyCode.setEnabled(true);
                    keyCode.setText(g.keyName);
                    lockLocked.setEnabled(true);
                    lockLocked.setSelected(g.doorDefaultsLocked);
                    g.isReadable=false;
                    readable.setSelected(g.isReadable);
                    readableText.setText("");
                }
                else
                {
                    keyCode.setText("");
                    readable.setEnabled(true);
                    readable.setSelected(g.isReadable);
                    if(g.isReadable) 
                    {
                        readableText.setEnabled(true);
                        readableText.setText(g.keyName);
                    }
                }
            }
            else
            {
                classRestrict.setEnabled(true);
                classRestrict.setSelected(g.classRestricted);
                readableText.setText("");
                keyCode.setText("");
                if(g.classRestricted)
                {
                    classPicked.setEnabled(true);
                    if(classPicked.getItemCount()==0)
                    {
                        Vector V=TheGrinder.getClassList();
                        for(int e=0;e<V.size();e++)
                        {
                            String cid=(String)V.elementAt(e);
                            classPicked.addItem(cid);
                            if(cid.equalsIgnoreCase(g.keyName))
                                classPicked.select(e);
                        }
                        if(classPicked.getSelectedIndex()<0)
                            classPicked.select(0);
                            
                    }
                }
            }
        }
        else
        {
            JLabel11.setEnabled(true);
            keyCode.setEnabled(true);
            keyCode.setText(exit.miscText());
        }
    }

    public static MapGrinder.Exit newExit(Frame parent,
                                          String fromRoomID,
                                          String toRoomID,
	                                      String title,
	                                      boolean sharedHere)
	{
	    if(GrinderExit.upAlready) return null; 
	    String text="Create a link from room "+fromRoomID+" to room "+toRoomID+".";
	    GrinderExit GOC=new GrinderExit(parent,title,text,true);
	    GOC.shared.setText("Shared with room "+toRoomID+".");
	    GOC.shared.setSelected(sharedHere);
	    GOC.setVisible(true);
	    return GOC.exit;
	}


    public static MapGrinder.Exit oldExit(Frame parent, 
                                          MapGrinder.Room room,
                                          MapGrinder.Direction dir,
                                          MapGrinder.Exit oldExit,
	                                      String title)
	{
	    if(GrinderExit.upAlready) return null; 
	    String text="Modify exit from room "+room.roomID+".";
	    if(oldExit.exitSame)
	    {
	        text="Modify exit shared between "+room.roomID+" and "+dir.room+".";
	    }
	    GrinderExit GOC=new GrinderExit(parent,title,text,true);
	    GOC.shared.setText("Shared with room "+dir.room+".");
	    GOC.shared.setSelected(false);
	    if(oldExit.exitSame)
	        GOC.shared.setSelected(true);
	    GOC.exit=oldExit.getclone();
	    GOC.origExit=oldExit.getclone();
	    GOC.setVisible(true);
	    return GOC.exit;
	}


	public void setVisible(boolean b)
	{
	    if(b&&upAlready)
	        return;
	    if (b)
	    {
    		Rectangle bounds = getParent().getBounds();
    		Rectangle abounds = getBounds();

    		setLocation(bounds.x + (bounds.width - abounds.width)/ 2,
    			 bounds.y + 50 + (bounds.height - abounds.height)/2);
            upAlready=true;    			 
            Vector exits=TheGrinder.getExitTypes();
            int selectable=-1;
            int openSelection=-1;
            exitclass.removeAll();
            for(int e=0;e<exits.size();e++)
            {
                String exitid=(String)exits.elementAt(e);
                exitclass.addItem(exitid);
                if((exit!=null)&&(exit.classID.equals(exitid)))
                    selectable=e;
                if(exitid.equalsIgnoreCase("open"))
                    openSelection=e;
            }
            if(selectable>=0)
                exitclass.select(selectable);
            else
            {
                exitclass.select(openSelection);
                exit=new MapGrinder.Exit();
                exit.classID="Open";
                exit.exitSame=shared.isSelected();
            }
                
	        makeTheScreenRight();
	    }

		super.setVisible(b);
	}

	//{{DECLARE_CONTROLS
	java.awt.Button okButton = new java.awt.Button();
	java.awt.Button CancelButton = new java.awt.Button();
	javax.swing.JTextPane JLabel1 = new javax.swing.JTextPane();
	javax.swing.JCheckBox shared = new javax.swing.JCheckBox();
	javax.swing.JLabel JLabel2 = new javax.swing.JLabel();
	javax.swing.JCheckBox hasDoor = new javax.swing.JCheckBox();
	javax.swing.JCheckBox doorClosed = new javax.swing.JCheckBox();
	javax.swing.JCheckBox hasLock = new javax.swing.JCheckBox();
	javax.swing.JCheckBox lockLocked = new javax.swing.JCheckBox();
	javax.swing.JTextField level = new javax.swing.JTextField();
	javax.swing.JLabel label2 = new javax.swing.JLabel();
	javax.swing.JTextField name = new javax.swing.JTextField();
	javax.swing.JLabel JLabel3 = new javax.swing.JLabel();
	javax.swing.JTextField desc = new javax.swing.JTextField();
	javax.swing.JLabel JLabel4 = new javax.swing.JLabel();
	javax.swing.JTextField displayText = new javax.swing.JTextField();
	javax.swing.JLabel JLabel5 = new javax.swing.JLabel();
	javax.swing.JLabel JLabel6 = new javax.swing.JLabel();
	javax.swing.JTextField resetTicks = new javax.swing.JTextField();
	javax.swing.JLabel JLabel7 = new javax.swing.JLabel();
	javax.swing.JTextField closedText = new javax.swing.JTextField();
	javax.swing.JTextField doorWord = new javax.swing.JTextField();
	javax.swing.JLabel JLabel8 = new javax.swing.JLabel();
	javax.swing.JTextField openWord = new javax.swing.JTextField();
	javax.swing.JLabel JLabel9 = new javax.swing.JLabel();
	javax.swing.JTextField closeWord = new javax.swing.JTextField();
	javax.swing.JLabel JLabel10 = new javax.swing.JLabel();
	javax.swing.JCheckBox readable = new javax.swing.JCheckBox();
	javax.swing.JTextField readableText = new javax.swing.JTextField();
	java.awt.Choice exitclass = new java.awt.Choice();
	java.awt.Choice classPicked = new java.awt.Choice();
	javax.swing.JTextField keyCode = new javax.swing.JTextField();
	javax.swing.JLabel JLabel11 = new javax.swing.JLabel();
	javax.swing.JCheckBox trapped = new javax.swing.JCheckBox();
	javax.swing.JCheckBox levelRestrict = new javax.swing.JCheckBox();
	javax.swing.JCheckBox classRestrict = new javax.swing.JCheckBox();
	javax.swing.JCheckBox hidden = new javax.swing.JCheckBox();
	//}}
    
    // Used for addNotify check.
	boolean fComponentsAdjusted = false;

	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == okButton)
				okButton_ActionPerformed(event);
			else if (object == CancelButton)
				CancelButton_ActionPerformed(event);
			else if (object == level)
				level_actionPerformed(event);
			else if (object == name)
				name_actionPerformed(event);
			else if (object == desc)
				desc_actionPerformed(event);
			else if (object == displayText)
				displayText_actionPerformed(event);
		}
	}

	void okButton_ActionPerformed(java.awt.event.ActionEvent event)
	{
	    if(exit==null) return;
	    if(exit.classID.equalsIgnoreCase("genexit"))
	    {
	        if(name.getText().length()==0)
	        {
	            name.requestFocus();
	            return;
	        }
	        if(desc.getText().length()==0)
	        {
	            desc.requestFocus();
	            return;
	        }
	        if(displayText.getText().length()==0)
	        {
	            displayText.requestFocus();
	            return;
	        }
	        if(hasDoor.isSelected())
	        {
	            if(closedText.getText().length()==0)
	            {
	                closedText.requestFocus();
	                return;
	            }
	            if(openWord.getText().length()==0)
	            {
	                openWord.requestFocus();
	                return;
	            }
	            if(closeWord.getText().length()==0)
	            {
	                closeWord.requestFocus();
	                return;
	            }
	            if(readable.isSelected())
	            {
	                if(readableText.getText().length()==0)
	                {
	                    readableText.requestFocus();
	                    return;
	                }
	            }
	        }
	    }
	    upAlready=false;
		try {
			this.dispose();
		} catch (Exception e) {
		}
	}


	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowOpened(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == GrinderExit.this)
				GrinderExit_WindowOpened(event);
		}

		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == GrinderExit.this)
				GrinderExit_WindowClosing(event);
		}
	}

	void GrinderExit_WindowClosing(java.awt.event.WindowEvent event)
	{
		// to do: code goes here.
	}


	class SymKey extends java.awt.event.KeyAdapter
	{
		public void keyPressed(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if ((object == okButton)&&((event.getKeyCode()==13)||(event.getKeyCode()==10)))
                okButton_ActionPerformed(null);
			if ((object == CancelButton)&&((event.getKeyCode()==13)||(event.getKeyCode()==10)))
                CancelButton_ActionPerformed(null);	
		}
	}
	void GrinderExit_WindowOpened(java.awt.event.WindowEvent event)
	{
	}

	void CancelButton_ActionPerformed(java.awt.event.ActionEvent event)
	{
	    exit=null;
	    upAlready=false;
		try {
			this.dispose();
		} catch (Exception e) {
		}

			 
	}

	class SymMouse extends java.awt.event.MouseAdapter
	{
		public void mouseClicked(java.awt.event.MouseEvent event)
		{
			Object object = event.getSource();
			if (object == hasDoor)
				hasDoor_mouseClicked(event);
		}

	}

	class SymItem implements java.awt.event.ItemListener
	{
		public void itemStateChanged(java.awt.event.ItemEvent event)
		{
			Object object = event.getSource();
			if (object == exitclass)
				exitclass_ItemStateChanged(event);
			else if (object == hasDoor)
				hasDoor_itemStateChanged(event);
			else if (object == doorClosed)
				doorClosed_itemStateChanged(event);
			else if (object == lockLocked)
				lockLocked_itemStateChanged(event);
			else if (object == hasLock)
				hasLock_itemStateChanged(event);
			else if (object == readable)
				readable_itemStateChanged(event);
			if (object == levelRestrict)
				levelRestrict_itemStateChanged(event);
			else if (object == classRestrict)
				classRestrict_itemStateChanged(event);
			else if (object == classPicked)
				classPicked_ItemStateChanged(event);
			else if (object == trapped)
				trapped_itemStateChanged(event);
			else if (object == hidden)
				hidden_itemStateChanged(event);
		}
	}

	void exitclass_ItemStateChanged(java.awt.event.ItemEvent event)
	{
		// to do: code goes here.
		String sel=exitclass.getSelectedItem();
		if((origExit!=null)&&(sel.equals(origExit.classID)))
		    exit=origExit;
		else
		{
		    if((origExit==null)&&(exit!=null)&&(exit.classID.equalsIgnoreCase("genexit")))
		        origExit=exit;
		    exit=new MapGrinder.Exit();
		    exit.classID=sel;
		    if(sel.equalsIgnoreCase("genexit"))
		        exit.setMiscText(GenGrinder.getPropertiesStr(exit,new MapGrinder.GenGen()));
		}
		makeTheScreenRight();
	}

	void hasDoor_itemStateChanged(java.awt.event.ItemEvent event)
	{
	    if(exit==null) return;
	    if(disFlag) return;
	    disFlag=true;
        MapGrinder.GenGen g=new MapGrinder.GenGen();
        GenGrinder.setPropertiesStr(exit, g, exit.miscText());
        g.hasADoor=hasDoor.isSelected();
        exit.hasADoor=g.hasADoor;
        exit.setMiscText(GenGrinder.getPropertiesStr(exit,g));
		makeTheScreenRight();
	    disFlag=false;
	}

	void hasDoor_mouseClicked(java.awt.event.MouseEvent event)
	{
	}

	void doorClosed_itemStateChanged(java.awt.event.ItemEvent event)
	{
	    if(exit==null) return;
        MapGrinder.GenGen g=new MapGrinder.GenGen();
        GenGrinder.setPropertiesStr(exit, g, exit.miscText());
        g.doorDefaultsClosed=doorClosed.isSelected();
        exit.setMiscText(GenGrinder.getPropertiesStr(exit,g));
	}

	void lockLocked_itemStateChanged(java.awt.event.ItemEvent event)
	{
	    if(exit==null) return;
        MapGrinder.GenGen g=new MapGrinder.GenGen();
        GenGrinder.setPropertiesStr(exit, g, exit.miscText());
        g.doorDefaultsLocked=lockLocked.isSelected();
        exit.setMiscText(GenGrinder.getPropertiesStr(exit,g));
	}

	class SymPropertyChange implements java.beans.PropertyChangeListener
	{
		public void propertyChange(java.beans.PropertyChangeEvent event)
		{
			Object object = event.getSource();
			if (object == keyCode)
				keyCode_propertyChange(event);
		}
	}

	void keyCode_propertyChange(java.beans.PropertyChangeEvent event)
	{
	}

	void hasLock_itemStateChanged(java.awt.event.ItemEvent event)
	{
	    if(exit==null) return;
	    if(disFlag) return;
	    disFlag=true;
        MapGrinder.GenGen g=new MapGrinder.GenGen();
        GenGrinder.setPropertiesStr(exit, g, exit.miscText());
        g.hasALock=hasLock.isSelected();
        exit.setMiscText(GenGrinder.getPropertiesStr(exit,g));
		makeTheScreenRight();
	    disFlag=false;
	}

	void level_actionPerformed(java.awt.event.ActionEvent event)
	{
	}

	void name_actionPerformed(java.awt.event.ActionEvent event)
	{
	}

	void desc_actionPerformed(java.awt.event.ActionEvent event)
	{
	}

	void displayText_actionPerformed(java.awt.event.ActionEvent event)
	{
	}

	class SymFocus extends java.awt.event.FocusAdapter
	{
		public void focusLost(java.awt.event.FocusEvent event)
		{
			Object object = event.getSource();
			if (object == level)
				level_focusLost(event);
			else if (object == name)
				name_focusLost(event);
			else if (object == displayText)
				displayText_focusLost(event);
			else if (object == desc)
				desc_focusLost(event);
			else if (object == keyCode)
				keyCode_focusLost(event);
			else if (object == resetTicks)
				resetTicks_focusLost(event);
			else if (object == closedText)
				closedText_focusLost(event);
			else if (object == doorWord)
				doorWord_focusLost(event);
			else if (object == openWord)
				openWord_focusLost(event);
			else if (object == closeWord)
				closeWord_focusLost(event);
			else if (object == readableText)
				readableText_focusLost(event);
		}
	}

	void level_focusLost(java.awt.event.FocusEvent event)
	{
	    if(exit==null) return;
        MapGrinder.GenGen g=new MapGrinder.GenGen();
        GenGrinder.setPropertiesStr(exit, g, exit.miscText());
        g.level=GenGrinder.s_int(level.getText());
        exit.setMiscText(GenGrinder.getPropertiesStr(exit,g));
	}

	void name_focusLost(java.awt.event.FocusEvent event)
	{
	    if(exit==null) return;
        MapGrinder.GenGen g=new MapGrinder.GenGen();
        GenGrinder.setPropertiesStr(exit, g, exit.miscText());
        g.name=name.getText();
        exit.setMiscText(GenGrinder.getPropertiesStr(exit,g));
	}

	void displayText_focusLost(java.awt.event.FocusEvent event)
	{
	    if(exit==null) return;
        MapGrinder.GenGen g=new MapGrinder.GenGen();
        GenGrinder.setPropertiesStr(exit, g, exit.miscText());
        g.displayText=displayText.getText();
        exit.setMiscText(GenGrinder.getPropertiesStr(exit,g));
	}

	void desc_focusLost(java.awt.event.FocusEvent event)
	{
	    if(exit==null) return;
        MapGrinder.GenGen g=new MapGrinder.GenGen();
        GenGrinder.setPropertiesStr(exit, g, exit.miscText());
        g.description=desc.getText();
        exit.setMiscText(GenGrinder.getPropertiesStr(exit,g));
	}

	void keyCode_focusLost(java.awt.event.FocusEvent event)
	{
	    if(exit==null) return;
	    if(exit.classID.equalsIgnoreCase("genexit"))
	    {
            MapGrinder.GenGen g=new MapGrinder.GenGen();
            GenGrinder.setPropertiesStr(exit, g, exit.miscText());
            g.keyName=keyCode.getText();
            exit.setMiscText(GenGrinder.getPropertiesStr(exit,g));
        }
        else
            exit.setMiscText(keyCode.getText());
	}

	void resetTicks_focusLost(java.awt.event.FocusEvent event)
	{
	    if(exit==null) return;
        MapGrinder.GenGen g=new MapGrinder.GenGen();
        GenGrinder.setPropertiesStr(exit, g, exit.miscText());
        g.openDelayTicks=GenGrinder.s_int(resetTicks.getText());
        exit.setMiscText(GenGrinder.getPropertiesStr(exit,g));
	}

	void closedText_focusLost(java.awt.event.FocusEvent event)
	{
	    if(exit==null) return;
        MapGrinder.GenGen g=new MapGrinder.GenGen();
        GenGrinder.setPropertiesStr(exit, g, exit.miscText());
        g.closedText=closedText.getText();
        exit.setMiscText(GenGrinder.getPropertiesStr(exit,g));
	}

	void doorWord_focusLost(java.awt.event.FocusEvent event)
	{
	    if(exit==null) return;
        MapGrinder.GenGen g=new MapGrinder.GenGen();
        GenGrinder.setPropertiesStr(exit, g, exit.miscText());
        g.doorName=doorWord.getText();
        exit.setMiscText(GenGrinder.getPropertiesStr(exit,g));
	}

	void openWord_focusLost(java.awt.event.FocusEvent event)
	{
	    if(exit==null) return;
        MapGrinder.GenGen g=new MapGrinder.GenGen();
        GenGrinder.setPropertiesStr(exit, g, exit.miscText());
        g.openName=openWord.getText();
        exit.setMiscText(GenGrinder.getPropertiesStr(exit,g));
	}

	void closeWord_focusLost(java.awt.event.FocusEvent event)
	{
	    if(exit==null) return;
        MapGrinder.GenGen g=new MapGrinder.GenGen();
        GenGrinder.setPropertiesStr(exit, g, exit.miscText());
        g.closeName=closeWord.getText();
        exit.setMiscText(GenGrinder.getPropertiesStr(exit,g));
	}

	void readableText_focusLost(java.awt.event.FocusEvent event)
	{
	    if(exit==null) return;
        MapGrinder.GenGen g=new MapGrinder.GenGen();
        GenGrinder.setPropertiesStr(exit, g, exit.miscText());
        g.keyName=readableText.getText();
        exit.setMiscText(GenGrinder.getPropertiesStr(exit,g));
	}

	void readable_itemStateChanged(java.awt.event.ItemEvent event)
	{
	    if(exit==null) return;
	    if(disFlag) return;
	    disFlag=true;
        MapGrinder.GenGen g=new MapGrinder.GenGen();
        GenGrinder.setPropertiesStr(exit, g, exit.miscText());
        
        g.isReadable=readable.isSelected();
        exit.setMiscText(GenGrinder.getPropertiesStr(exit,g));
		makeTheScreenRight();
	    disFlag=false;
	}

	void levelRestrict_itemStateChanged(java.awt.event.ItemEvent event)
	{
	    if(exit==null) return;
	    if(disFlag) return;
	    disFlag=true;
        MapGrinder.GenGen g=new MapGrinder.GenGen();
        GenGrinder.setPropertiesStr(exit, g, exit.miscText());
        g.levelRestricted=levelRestrict.isSelected();
        exit.setMiscText(GenGrinder.getPropertiesStr(exit,g));
		makeTheScreenRight();
	    disFlag=false;
	}

	void classRestrict_itemStateChanged(java.awt.event.ItemEvent event)
	{
	    if(exit==null) return;
	    if(disFlag) return;
	    disFlag=true;
        MapGrinder.GenGen g=new MapGrinder.GenGen();
        GenGrinder.setPropertiesStr(exit, g, exit.miscText());
        g.classRestricted=classRestrict.isSelected();
        exit.setMiscText(GenGrinder.getPropertiesStr(exit,g));
		makeTheScreenRight();
	    disFlag=false;
	}

	void classPicked_ItemStateChanged(java.awt.event.ItemEvent event)
	{
	    if(exit==null) return;
	    if(disFlag) return;
	    disFlag=true;
        MapGrinder.GenGen g=new MapGrinder.GenGen();
        GenGrinder.setPropertiesStr(exit, g, exit.miscText());
        g.keyName=classPicked.getSelectedItem();
        exit.setMiscText(GenGrinder.getPropertiesStr(exit,g));
		makeTheScreenRight();
	    disFlag=false;
	}

	void trapped_itemStateChanged(java.awt.event.ItemEvent event)
	{
	    if(exit==null) return;
        MapGrinder.GenGen g=new MapGrinder.GenGen();
        GenGrinder.setPropertiesStr(exit, g, exit.miscText());
        g.isTrapped=trapped.isSelected();
        exit.setMiscText(GenGrinder.getPropertiesStr(exit,g));
	}

	void hidden_itemStateChanged(java.awt.event.ItemEvent event)
	{
		// to do: code goes here.
	    if(exit==null) return;
	    if(disFlag) return;
	    disFlag=true;
        MapGrinder.GenGen g=new MapGrinder.GenGen();
        GenGrinder.setPropertiesStr(exit, g, exit.miscText());
        if(hidden.isSelected())
            g.disposition=g.disposition|GenGrinder.IS_HIDDEN;
        else
            g.disposition=g.disposition&(GenGrinder.ALLMASK-GenGrinder.IS_HIDDEN);
        exit.setMiscText(GenGrinder.getPropertiesStr(exit,g));
		makeTheScreenRight();
	    disFlag=false;
	}
}
