package com.planet_ink.grinder;
import com.planet_ink.grinder.MapGrinder.*;
import java.awt.*;
import java.util.*;
import javax.swing.JProgressBar;
import javax.swing.JLabel;



public class GrinderMapLoader extends Dialog {

    Vector map=null;
    Frame myParent=null;
    
	public GrinderMapLoader(Frame parent, Vector newMap, boolean modal)
	{
		super(parent, modal);
		map=newMap;
		myParent=parent;

		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
        
		//{{INIT_CONTROLS
		setLayout(null);
		setBackground(new java.awt.Color(255,255,128));
		setForeground(java.awt.Color.blue);
		setFont(new Font("Dialog", Font.BOLD, 12));
		setSize(249,150);
		setVisible(false);
		label1.setText("Reading room data...");
		add(label1);
		label1.setBounds(60,0,132,60);
		JProgressBar1.setStringPainted(true);
		add(JProgressBar1);
		JProgressBar1.setBounds(24,84,200,28);
		label1.setForeground(java.awt.Color.blue);
		setTitle("MUDGrinder - Loading Rooms...");
		setResizable(false);
		//}}
        
		//{{REGISTER_LISTENERS
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		SymAction lSymAction = new SymAction();
		//}}
		
		

	}
    
    public void loadRooms()
    {
        label1.setText("Loading room names...");
        label1.repaint();
        JProgressBar1.setValue(0);
        JProgressBar1.repaint();
        Vector rooms=TheGrinder.getRoomIDs();
        JProgressBar1.setValue(JProgressBar1.getMaximum());
        JProgressBar1.repaint();
        if(rooms==null) return;
        label1.setText("Loading rooms...");
        label1.repaint();
		JProgressBar1.setMaximum(rooms.size());
        JProgressBar1.setValue(0);
        if(map==null) return;
        JProgressBar1.repaint();
        for(int r=0;r<rooms.size();r++)
        {
            String newRoomID=(String)rooms.elementAt(r);
            MapGrinder.Room newRoom=MapGrinder.loadRoom(newRoomID);
            if(newRoom!=null)
                map.addElement(newRoom);
            else
            {
                GrinderOKBox.okMe(myParent,"Error","Cannot load rooms.  Failing.");
                map=null;
                this.hide();
                this.dispose();
                return;
                // error condition!!!!!!
            }
            JProgressBar1.setValue(r+1);
            JProgressBar1.repaint();
        }
        placeRooms();
        this.hide();
        this.dispose();
    }
    
    public void placeRooms()
    {
        label1.setText("Placing rooms...");
        label1.repaint();
		JProgressBar1.setMaximum(map.size());
        JProgressBar1.setValue(0);
        JProgressBar1.repaint();
        MapGrinder.placeRooms(myParent,JProgressBar1);
    }
    
	public GrinderMapLoader(Frame parent,Vector map, String title, boolean modal)
	{
		this(parent, map, modal);
		setTitle(title);
	}

	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
                Dimension d = getSize();

		super.addNotify();

		// Only do this once.
		if (fComponentsAdjusted)
			return;

		// Adjust components according to the insets
		Insets insets = getInsets();
		setSize(insets.left + insets.right + d.width, insets.top + insets.bottom + d.height);
		Component components[] = getComponents();
		for (int i = 0; i < components.length; i++)
		{
			Point p = components[i].getLocation();
			p.translate(insets.left, insets.top);
			components[i].setLocation(p);
		}

		// Used for addNotify check.
		fComponentsAdjusted = true;
	}

    public void startReading()
    {
        new GrinderDelay(this).start();
        setVisible(true);
    }
    
	public void setVisible(boolean b)
	{
	    if (b)
	    {
    		Rectangle bounds = getParent().getBounds();
    		Rectangle abounds = getBounds();

    		setLocation(bounds.x + (bounds.width - abounds.width)/ 2,
    			 bounds.y + (bounds.height - abounds.height)/2);
	    }
		super.setVisible(b);
	}

	//{{DECLARE_CONTROLS
	javax.swing.JLabel label1 = new javax.swing.JLabel();
	javax.swing.JProgressBar JProgressBar1 = new javax.swing.JProgressBar();
	//}}
    
    // Used for addNotify check.
	boolean fComponentsAdjusted = false;

	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
		}
	}


	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == GrinderMapLoader.this)
				GrinderMapLoader_WindowClosing(event);
		}
	}

	void GrinderMapLoader_WindowClosing(java.awt.event.WindowEvent event)
	{
		// to do: code goes here.
	}

    private class GrinderDelay extends Thread
    {
        public GrinderDelay(Object parent)
        {
            super();
        }
        
        public void run()
        {
            try { this.sleep(500); }catch(Exception e){}
            loadRooms();
        }
        
    }


}
