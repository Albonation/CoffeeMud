package com.planet_ink.grinder;
/*
	This simple extension of the java.awt.Frame class
	contains all the elements necessary to act as the
	main window of an application.
 */

import java.awt.*;
import java.util.*;
import javax.swing.*;

public class MUDGrinder extends Frame
{
	public MUDGrinder()
	{
	    //{{INIT_MENUS
		menu1.setLabel("MUD");
		menu1.add(newMenuItem);
		newMenuItem.setLabel("Connect");
		newMenuItem.setShortcut(new MenuShortcut(java.awt.event.KeyEvent.VK_Z,false));
		menu1.add(newAreaMenuItem);
		newAreaMenuItem.setEnabled(false);
		newAreaMenuItem.setLabel("New Area");
		newAreaMenuItem.setShortcut(new MenuShortcut(java.awt.event.KeyEvent.VK_N,false));
		menu1.add(oldAreaMenuItem);
		oldAreaMenuItem.setEnabled(false);
		oldAreaMenuItem.setLabel("Open Area");
		oldAreaMenuItem.setShortcut(new MenuShortcut(java.awt.event.KeyEvent.VK_O,false));
		menu1.add(closeAreaMenuItem);
		closeAreaMenuItem.setEnabled(false);
		closeAreaMenuItem.setLabel("Close");
		closeAreaMenuItem.setShortcut(new MenuShortcut(java.awt.event.KeyEvent.VK_R,false));
		menu1.add(exitMenuItem);
		exitMenuItem.setLabel("Exit");
		exitMenuItem.setShortcut(new MenuShortcut(java.awt.event.KeyEvent.VK_X,false));
		mainMenuBar.add(menu1);
		menu2.setLabel("Tools");
		menu2.add(EditMenuItem);
		EditMenuItem.setEnabled(false);
		EditMenuItem.setLabel("Edit");
		EditMenuItem.setShortcut(new MenuShortcut(java.awt.event.KeyEvent.VK_E,false));
		menu2.add(DelMenuItem);
		DelMenuItem.setEnabled(false);
		DelMenuItem.setLabel("Delete");
		DelMenuItem.setShortcut(new MenuShortcut(java.awt.event.KeyEvent.VK_DELETE,false));
		menu2.add(AddMenuItem);
		AddMenuItem.setEnabled(false);
		AddMenuItem.setLabel("Add New");
		AddMenuItem.setShortcut(new MenuShortcut(java.awt.event.KeyEvent.VK_A,false));
		menu2.add(LinkMenuItem);
		LinkMenuItem.setEnabled(false);
		LinkMenuItem.setLabel("Link");
		LinkMenuItem.setShortcut(new MenuShortcut(java.awt.event.KeyEvent.VK_L,false));
		mainMenuBar.add(menu2);
		menu3.setLabel("Help");
		menu3.add(aboutMenuItem);
		aboutMenuItem.setLabel("About...");
		mainMenuBar.add(menu3);
		//$$ mainMenuBar.move(0,312);
		setMenuBar(mainMenuBar);
		//}}
		
		//{{REGISTER_LISTENERS
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		SymAction lSymAction = new SymAction();
		exitMenuItem.addActionListener(lSymAction);
		aboutMenuItem.addActionListener(lSymAction);
		newMenuItem.addActionListener(lSymAction);
		oldAreaMenuItem.addActionListener(lSymAction);
		newAreaMenuItem.addActionListener(lSymAction);
		SymComponent aSymComponent = new SymComponent();
		this.addComponentListener(aSymComponent);
		SymAdjustment lSymAdjustment = new SymAdjustment();
		verticalScrollbar1.addAdjustmentListener(lSymAdjustment);
		horizontalScrollbar1.addAdjustmentListener(lSymAdjustment);
		closeAreaMenuItem.addActionListener(lSymAction);
		EditMenuItem.addActionListener(lSymAction);
		DelMenuItem.addActionListener(lSymAction);
		AddMenuItem.addActionListener(lSymAction);
		LinkMenuItem.addActionListener(lSymAction);
		//}}
	    
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
		
		//{{INIT_CONTROLS
		setLayout(null);
		setSize(684,376);
		setVisible(false);
		add(verticalScrollbar1);
		verticalScrollbar1.setBounds(672,0,12,372);
		add(horizontalScrollbar1);
		horizontalScrollbar1.setBounds(0,360,672,12);
		setTitle("MUDGrinder v1.1");
		//}}
	    new GrinderDelay3(this).start();
	}
	
	public MUDGrinder(String title)
	{
		this();
		setTitle(title);
	}
	
	public void suddenlyConnected()
	{
	    this.oldAreaMenuItem.setEnabled(true);
	    this.newAreaMenuItem.setEnabled(true);
	    this.closeAreaMenuItem.setEnabled(false);
	    this.newMenuItem.setEnabled(false);
		EditMenuItem.setEnabled(false);
		DelMenuItem.setEnabled(false);
		AddMenuItem.setEnabled(false);
		LinkMenuItem.setEnabled(false);
	    this.setTitle("MUDGrinder v1.1");
	    TheGrinder.setNewAreaName("");
	    MapGrinder.reset();
	    new GrinderDelay2(this).start();
	}
	
	public void suddenlyAnArea(String named)
	{
	    this.oldAreaMenuItem.setEnabled(false);
	    this.newAreaMenuItem.setEnabled(false);
	    this.closeAreaMenuItem.setEnabled(true);
	    this.newMenuItem.setEnabled(false);
	    this.setTitle("MUDGrinder v1.1                AREA: "+named);
		EditMenuItem.setEnabled(false);
		DelMenuItem.setEnabled(false);
		AddMenuItem.setEnabled(false);
		LinkMenuItem.setEnabled(false);
	    TheGrinder.setNewAreaName(named);
	    Vector V=TheGrinder.getAreasList();
	    boolean addIt=true;
	    for(int v=0;v<V.size();v++)
	    {
	        String s=(String)V.elementAt(v);
	        if(named.equalsIgnoreCase(s))
	            addIt=false;
	    }
	    if(addIt)
	        V.addElement(named);
	    this.repaint();
	    MapGrinder.reset();
	    new GrinderDelay(this).start();
	}
	
	static public void main(String args[])
	{
		try
		{
		    if(args.length>0)
		        if(GenGrinder.s_int(args[0])>0)
		            GrinderConnection.SOTIMEOUT=GenGrinder.s_int(args[0]);
			//Create a new instance of our application's frame, and make it visible.
    		(new MUDGrinder()).setVisible(true);
		}
		catch (Throwable t)
		{
			System.err.println(t);
			t.printStackTrace();
			//Ensure the application exits with an error condition.
			System.exit(1);
		}
	}
	
	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
		Dimension d = getSize();
		
		super.addNotify();
	
		if (fComponentsAdjusted)
			return;
	
		// Adjust components according to the insets
		setSize(getInsets().left + getInsets().right + d.width, getInsets().top + getInsets().bottom + d.height);
		Component components[] = getComponents();
		for (int i = 0; i < components.length; i++)
		{
			Point p = components[i].getLocation();
			p.translate(getInsets().left, getInsets().top);
			components[i].setLocation(p);
		}
		fComponentsAdjusted = true;
	}
	
	// Used for addNotify check.
	boolean fComponentsAdjusted = false;
	
	//{{DECLARE_CONTROLS
	java.awt.Scrollbar verticalScrollbar1 = new java.awt.Scrollbar(Scrollbar.VERTICAL);
	java.awt.Scrollbar horizontalScrollbar1 = new java.awt.Scrollbar(Scrollbar.HORIZONTAL);
	//}}
	
	//{{DECLARE_MENUS
	java.awt.MenuBar mainMenuBar = new java.awt.MenuBar();
	java.awt.Menu menu1 = new java.awt.Menu();
	java.awt.MenuItem newMenuItem = new java.awt.MenuItem();
	java.awt.MenuItem newAreaMenuItem = new java.awt.MenuItem();
	java.awt.MenuItem oldAreaMenuItem = new java.awt.MenuItem();
	java.awt.MenuItem closeAreaMenuItem = new java.awt.MenuItem();
	java.awt.MenuItem exitMenuItem = new java.awt.MenuItem();
	java.awt.Menu menu2 = new java.awt.Menu();
	java.awt.MenuItem EditMenuItem = new java.awt.MenuItem();
	java.awt.MenuItem DelMenuItem = new java.awt.MenuItem();
	java.awt.MenuItem AddMenuItem = new java.awt.MenuItem();
	java.awt.MenuItem LinkMenuItem = new java.awt.MenuItem();
	java.awt.Menu menu3 = new java.awt.Menu();
	java.awt.MenuItem aboutMenuItem = new java.awt.MenuItem();
	//}}
	
	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == MUDGrinder.this)
				MUDGrinder_WindowClosing(event);
		}
	}
	
	void MUDGrinder_WindowClosing(java.awt.event.WindowEvent event)
	{
		// to do: code goes here.
    	MUDGrinder_WindowClosing_Interaction1(event);
	}


	void MUDGrinder_WindowClosing_Interaction1(java.awt.event.WindowEvent event)
	{
		try {
			// QuitDialog Create and show as modal
			(new GrinderQuitDialog(this, true)).setVisible(true);
		} catch (Exception e) {
		}
	}

	
	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == aboutMenuItem)
				aboutMenuItem_ActionPerformed(event);
			else if (object == exitMenuItem)
				exitMenuItem_ActionPerformed(event);
			else if (object == newMenuItem)
				newMenuItem_ActionPerformed(event);
			else if (object == oldAreaMenuItem)
				oldAreaMenuItem_ActionPerformed(event);
			else if (object == newAreaMenuItem)
				newAreaMenuItem_ActionPerformed(event);
			else if (object == closeAreaMenuItem)
				closeAreaMenuItem_ActionPerformed(event);
			else if (object == EditMenuItem)
				EditMenuItem_ActionPerformed(event);
			else if (object == DelMenuItem)
				DelMenuItem_ActionPerformed(event);
			else if (object == AddMenuItem)
				AddMenuItem_ActionPerformed(event);
			else if (object == LinkMenuItem)
				LinkMenuItem_ActionPerformed(event);
		}
	}


	void aboutMenuItem_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
			 
		aboutMenuItem_ActionPerformed_Interaction1(event);
	}


	void aboutMenuItem_ActionPerformed_Interaction1(java.awt.event.ActionEvent event)
	{
		try {
			// AboutDialog Create and show as modal
			(new GrinderAboutDialog(this, true)).setVisible(true);
		} catch (Exception e) {
		}
	}
	
	
	void exitMenuItem_ActionPerformed(java.awt.event.ActionEvent event)
	{
		// to do: code goes here.
		exitMenuItem_ActionPerformed_Interaction1(event);
	}


	void exitMenuItem_ActionPerformed_Interaction1(java.awt.event.ActionEvent event)
	{
		try {
			// QuitDialog Create and show as modal
		    (new GrinderQuitDialog(this, true)).setVisible(true);
		} catch (Exception e) {
		}
	}


	void newMenuItem_ActionPerformed(java.awt.event.ActionEvent event)
	{
		new GrinderConnectDialog(this,true).setVisible(true);
	}

	void oldAreaMenuItem_ActionPerformed(java.awt.event.ActionEvent event)
	{
		new GrinderAreaSelect(this,true).setVisible(true);
	}

	void newAreaMenuItem_ActionPerformed(java.awt.event.ActionEvent event)
	{
		new GrinderNewArea(this,true).setVisible(true);
			 
	}
    private class GrinderDelay extends Thread
    {
        private MUDGrinder myParent;
        
        public GrinderDelay(MUDGrinder parent)
        {
            super();
            myParent=parent;
        }
        
        public void run()
        {
            try { this.sleep(500); }catch(Exception e){}
            MUDGString.buildMap(myParent);
	        MUDGString.moveMapAround();
	        fixScrollbars();
        }
        
    }

    private class GrinderDelay2 extends Thread
    {
        private MUDGrinder myParent;
        
        public GrinderDelay2(MUDGrinder parent)
        {
            super();
            myParent=parent;
        }
        
        public void run()
        {
            try { this.sleep(500); }catch(Exception e){}
	        oldAreaMenuItem_ActionPerformed(null);
        }
    }

    private class GrinderDelay3 extends Thread
    {
        private MUDGrinder myParent;
        
        public GrinderDelay3(MUDGrinder parent)
        {
            super();
            myParent=parent;
        }
        
        public void run()
        {
            try { this.sleep(500); }catch(Exception e){}
	        newMenuItem_ActionPerformed(null);
        }
    }

	class SymComponent extends java.awt.event.ComponentAdapter
	{
		public void componentResized(java.awt.event.ComponentEvent event)
		{
			Object object = event.getSource();
			if (object == MUDGrinder.this)
				MUDGrinder_ComponentResized(event);
		}
	}

    void fixScrollbars()
    {
		int winWidth=this.getWidth();
		int winHeight=this.getHeight();
		int menuHeight=42;
	    verticalScrollbar1.setBounds((winWidth-4)-verticalScrollbar1.getWidth(),menuHeight,verticalScrollbar1.getWidth(),(winHeight-menuHeight)-3);
	    horizontalScrollbar1.setBounds(3,winHeight-horizontalScrollbar1.getHeight()-3,(winWidth-5)-verticalScrollbar1.getWidth(),horizontalScrollbar1.getHeight());
		EditMenuItem.setEnabled(false);
		DelMenuItem.setEnabled(false);
		AddMenuItem.setEnabled(false);
		LinkMenuItem.setEnabled(false);
	    if(TheGrinder.inAnArea())
        {
            MapGrinder.Room[][] grid=MapGrinder.getGrid();
            if(grid!=null)
            {
                verticalScrollbar1.setMaximum(MapGrinder.Ybound);
                verticalScrollbar1.setBlockIncrement(2);
                horizontalScrollbar1.setMaximum(MapGrinder.Xbound);
                horizontalScrollbar1.setBlockIncrement(2);
            }
		    EditMenuItem.setEnabled(true);
		    DelMenuItem.setEnabled(true);
		    AddMenuItem.setEnabled(true);
		    LinkMenuItem.setEnabled(true);
        }
        else
        {
                verticalScrollbar1.setMaximum(1);
                verticalScrollbar1.setBlockIncrement(1);
                horizontalScrollbar1.setMaximum(1);
                horizontalScrollbar1.setBlockIncrement(1);
                verticalScrollbar1.setValue(0);
                horizontalScrollbar1.setValue(0);
        }
    }
	void MUDGrinder_ComponentResized(java.awt.event.ComponentEvent event)
	{
	    fixScrollbars();
	}

	class SymAdjustment implements java.awt.event.AdjustmentListener
	{
		public void adjustmentValueChanged(java.awt.event.AdjustmentEvent event)
		{
			Object object = event.getSource();
			if (object == verticalScrollbar1)
				verticalScrollbar1_AdjustmentValueChanged(event);
			else if (object == horizontalScrollbar1)
				horizontalScrollbar1_AdjustmentValueChanged(event);
		}
	}

	void verticalScrollbar1_AdjustmentValueChanged(java.awt.event.AdjustmentEvent event)
	{
	    if(!TheGrinder.inAnArea())
	        return;
	    MUDGString.moveMapAround();
	}

	void horizontalScrollbar1_AdjustmentValueChanged(java.awt.event.AdjustmentEvent event)
	{
	    if(!TheGrinder.inAnArea())
	        return;
	    MUDGString.moveMapAround();
	}

	void closeAreaMenuItem_ActionPerformed(java.awt.event.ActionEvent event)
	{
	    if(!MapGrinder.closeIfAble(this))
		    if(!GrinderYesNo.askMe(this,"Close anyway?", "Would you like to close this map anyway?"))
		        return;
	    MUDGString.clearMap();
	    fixScrollbars();
	    suddenlyConnected();
	}


	void EditMenuItem_ActionPerformed(java.awt.event.ActionEvent event)
	{
	    MUDGString.edit();
	}

	void DelMenuItem_ActionPerformed(java.awt.event.ActionEvent event)
	{
	    MUDGString.delete();
	}

	void AddMenuItem_ActionPerformed(java.awt.event.ActionEvent event)
	{
	    MUDGString.add();
	}

	void LinkMenuItem_ActionPerformed(java.awt.event.ActionEvent event)
	{
	    MUDGString.link();
	}
}

