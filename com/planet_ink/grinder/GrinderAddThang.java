package com.planet_ink.grinder;
import java.awt.*;
import java.util.*;
import javax.swing.JTextPane;
import javax.swing.JLabel;
import javax.swing.JOptionPane;



public class GrinderAddThang extends Dialog {

    private Frame myParent=null;
    private Object thang=null;
    
	public GrinderAddThang(Frame parent, 
	                        Vector thangs,
	                        String title, 
	                        String text, 
	                        boolean modal)
	{
		super(parent, modal);
        myParent=parent;
		// This code is automatically generated by Visual Cafe when you add
		// components to the visual environment. It instantiates and initializes
		// the components. To modify the code, only use code syntax that matches
		// what Visual Cafe can generate, or Visual Cafe may be unable to back
		// parse your Java file into its visual environment.
        
		//{{INIT_CONTROLS
		setLayout(null);
		setBackground(new java.awt.Color(255,255,128));
		setForeground(java.awt.Color.blue);
		setFont(new Font("Dialog", Font.BOLD, 12));
		setSize(249,150);
		setVisible(false);
		okButton.setLabel("OK");
		add(okButton);
		okButton.setBounds(24,108,66,24);
		CancelButton.setLabel("Cancel");
		add(CancelButton);
		CancelButton.setBounds(168,108,66,24);
		JLabel1.setRequestFocusEnabled(false);
		JLabel1.setSelectedTextColor(java.awt.Color.blue);
		JLabel1.setCaretColor(java.awt.Color.blue);
		JLabel1.setOpaque(false);
		JLabel1.setDisabledTextColor(java.awt.Color.blue);
		JLabel1.setEditable(false);
		JLabel1.setEnabled(false);
		add(JLabel1);
		JLabel1.setBackground(java.awt.Color.yellow);
		JLabel1.setBounds(12,12,230,36);
		add(choice1);
		choice1.setBounds(36,48,180,24);
		setTitle("Yo baby yo baby yo!");
		setResizable(false);
		//}}
		
		JLabel1.setText(text);
		JLabel1.setForeground(java.awt.Color.blue);
		JLabel1.setFont(new Font("Dialog",Font.BOLD,12));
		setTitle(title);
        
		//{{REGISTER_LISTENERS
		SymWindow aSymWindow = new SymWindow();
		this.addWindowListener(aSymWindow);
		SymAction lSymAction = new SymAction();
		okButton.addActionListener(lSymAction);
		CancelButton.addActionListener(lSymAction);
		SymKey lSymKey=new SymKey();
		okButton.addKeyListener(lSymKey);
		CancelButton.addKeyListener(lSymKey);
		SymItem lSymItem = new SymItem();
		choice1.addItemListener(lSymItem);
		//}}

        choice1.removeAll();
        for(int i=0;i<thangs.size();i++)
            choice1.addItem((String)thangs.elementAt(i));
	}
    
	public void addNotify()
	{
		// Record the size of the window prior to calling parents addNotify.
                Dimension d = getSize();

		super.addNotify();

		// Only do this once.
		if (fComponentsAdjusted)
			return;

		// Adjust components according to the insets
		Insets insets = getInsets();
		setSize(insets.left + insets.right + d.width, insets.top + insets.bottom + d.height);
		Component components[] = getComponents();
		for (int i = 0; i < components.length; i++)
		{
			Point p = components[i].getLocation();
			p.translate(insets.left, insets.top);
			components[i].setLocation(p);
		}

		// Used for addNotify check.
		fComponentsAdjusted = true;
	}

    public static Object askMe(Frame parent, 
                               Vector thangs,
                               Object newThang,
	                           String title, 
	                           String text)
	{
	    GrinderAddThang GOC=new GrinderAddThang(parent,thangs,title,text,true);
	    GOC.thang=newThang;
	    GOC.setVisible(true);
	    return GOC.thang;
	}


	public void setVisible(boolean b)
	{
	    if (b)
	    {
    		Rectangle bounds = getParent().getBounds();
    		Rectangle abounds = getBounds();

    		setLocation(bounds.x + (bounds.width - abounds.width)/ 2,
    			 bounds.y + (bounds.height - abounds.height)/2);
	    }

		super.setVisible(b);
	}

	//{{DECLARE_CONTROLS
	java.awt.Button okButton = new java.awt.Button();
	java.awt.Button CancelButton = new java.awt.Button();
	javax.swing.JTextPane JLabel1 = new javax.swing.JTextPane();
	java.awt.Choice choice1 = new java.awt.Choice();
	//}}
    
    // Used for addNotify check.
	boolean fComponentsAdjusted = false;

	class SymAction implements java.awt.event.ActionListener
	{
		public void actionPerformed(java.awt.event.ActionEvent event)
		{
			Object object = event.getSource();
			if (object == okButton)
				okButton_ActionPerformed(event);
			else if (object == CancelButton)
				CancelButton_ActionPerformed(event);
		}
	}

	void okButton_ActionPerformed(java.awt.event.ActionEvent event)
	{
	    okButton.setEnabled(false);
	    choice1_ItemStateChanged(null);
	    TheGrinder.fillMe(thang);
		try 
		{
			this.dispose();
		} 
		catch (Exception e) 
		{
		}
	}


	class SymWindow extends java.awt.event.WindowAdapter
	{
		public void windowOpened(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == GrinderAddThang.this)
				GrinderAddThang_WindowOpened(event);
		}

		public void windowClosing(java.awt.event.WindowEvent event)
		{
			Object object = event.getSource();
			if (object == GrinderAddThang.this)
				GrinderAddThang_WindowClosing(event);
		}
	}

	void GrinderAddThang_WindowClosing(java.awt.event.WindowEvent event)
	{
		// to do: code goes here.
	}


	class SymKey extends java.awt.event.KeyAdapter
	{
		public void keyPressed(java.awt.event.KeyEvent event)
		{
			Object object = event.getSource();
			if ((object == okButton)&&((event.getKeyCode()==13)||(event.getKeyCode()==10)))
                okButton_ActionPerformed(null);
			if ((object == CancelButton)&&((event.getKeyCode()==13)||(event.getKeyCode()==10)))
                CancelButton_ActionPerformed(null);	
		}
	}
	void GrinderAddThang_WindowOpened(java.awt.event.WindowEvent event)
	{
	}

	void CancelButton_ActionPerformed(java.awt.event.ActionEvent event)
	{
	    thang=null;
		try 
		{
			this.dispose();
		} 
		catch (Exception e) 
		{
		}

			 
	}

	class SymItem implements java.awt.event.ItemListener
	{
		public void itemStateChanged(java.awt.event.ItemEvent event)
		{
			Object object = event.getSource();
			if (object == choice1)
				choice1_ItemStateChanged(event);
		}
	}

	void choice1_ItemStateChanged(java.awt.event.ItemEvent event)
	{
	    if(thang instanceof MapGrinder.Item)
	        ((MapGrinder.Item)thang).classID=choice1.getSelectedItem();
	    if(thang instanceof MapGrinder.MOB)
	        ((MapGrinder.MOB)thang).classID=choice1.getSelectedItem();
	}
}
